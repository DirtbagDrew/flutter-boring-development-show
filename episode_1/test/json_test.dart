import 'dart:convert';

import 'package:episode_1/src/article.dart';
import 'package:flutter_test/flutter_test.dart';
import 'package:http/http.dart' as http; // flutter depends on http

void main() {
  test("parses top stories.json", () {
    const jsonString =
        '[ 22276184, 22275550, 22276347, 22275311, 22275693, 22262291, 22275632, 22268067, 22275705, 22274091, 22274362, 22270436, 22275541, 22272966, 22273674, 22270464, 22260298, 22275946, 22273224, 22268440, 22272844, 22269115, 22259121, 22266173, 22240505, 22263022, 22256666, 22275613, 22275144, 22254719, 22255035, 22256957, 22272233, 22264553, 22269762, 22272107, 22263721, 22268248, 22275900, 22271950, 22269024, 22261612, 22273003, 22259833, 22272083, 22265197, 22270727, 22263274, 22275894, 22267393, 22268496, 22255757, 22270591, 22275591, 22274062, 22247292, 22275046, 22258806, 22258113, 22255914, 22274487, 22259025, 22264633, 22268941, 22257189, 22258651, 22258837, 22275663, 22268944, 22264936, 22269889, 22261530, 22272636, 22255694, 22255301, 22271792, 22271719, 22255681, 22268610, 22269402, 22262964, 22266987, 22244750, 22272057, 22266722, 22269370, 22267341, 22266070, 22265397, 22268356, 22269422, 22274226, 22263996, 22255491, 22264918, 22266669, 22267374, 22275235, 22264914, 22266966, 22274105, 22263758, 22263314, 22265235, 22263429, 22255610, 22265664, 22259334, 22267571, 22252330, 22269905, 22269533, 22260303, 22268611, 22264164, 22275927, 22247543, 22247301, 22255318, 22262339, 22264104, 22248325, 22267986, 22272425, 22275221, 22233937, 22269053, 22274949, 22255268, 22246442, 22259563, 22233074, 22253961, 22257613, 22260731, 22255758, 22244706, 22272660, 22262855, 22274138, 22260302, 22264043, 22275093, 22251076, 22256275, 22255156, 22254793, 22270991, 22249811, 22269869, 22236106, 22254958, 22251079, 22261534, 22255734, 22255715, 22272794, 22264448, 22258198, 22252727, 22269922, 22267547, 22237554, 22264178, 22255637, 22254802, 22226380, 22250614, 22261670, 22257630, 22261041, 22271815, 22256026, 22266710, 22271536, 22247899, 22254499, 22253977, 22249424, 22238335, 22264671, 22260047, 22263603, 22255336, 22248351, 22245409, 22257448, 22254589, 22246615, 22267092, 22262138, 22266386, 22248131, 22270140, 22242478, 22258803, 22233295, 22269716, 22260542, 22242659, 22257889, 22255308, 22246562, 22264573, 22257191, 22254742, 22256055, 22228083, 22254083, 22255762, 22253290, 22268986, 22244419, 22271874, 22246542, 22270515, 22251797, 22253782, 22250733, 22253516, 22265423, 22262467, 22252557, 22249662, 22248329, 22248456, 22231922, 22253131, 22268167, 22258162, 22248702, 22246334, 22268776, 22271155, 22248389, 22267429, 22256564, 22245977, 22232705, 22234884, 22231963, 22269976, 22246732, 22275479, 22268861, 22234999, 22242942, 22249329, 22273628, 22258969, 22244109, 22248239, 22266563, 22266532, 22271290, 22251259, 22264365, 22271884, 22256642, 22272079, 22257635, 22237043, 22267842, 22264085, 22237528, 22269722, 22230617, 22224277, 22275092, 22273364, 22237145, 22268450, 22262429, 22252044, 22255846, 22253893, 22271148, 22250847, 22245788, 22234730, 22256872, 22246887, 22227252, 22253844, 22256496, 22273769, 22226442, 22247499, 22235279, 22253272, 22233007, 22241884, 22240208, 22257337, 22265096, 22249759, 22235355, 22266593, 22244086, 22240041, 22271431, 22243823, 22264438, 22242720, 22247295, 22260561, 22255305, 22251017, 22257427, 22226148, 22250758, 22248974, 22235188, 22264481, 22243270, 22259026, 22251091, 22241251, 22270965, 22273234, 22252191, 22234590, 22263705, 22241737, 22232395, 22241020, 22233457, 22239737, 22273562, 22232633, 22242528, 22241533, 22260830, 22256103, 22240473, 22251014, 22271396, 22245534, 22255572, 22225851, 22271225, 22249875, 22245719, 22269046, 22265700, 22272795, 22226532, 22225436, 22237127, 22249843, 22234575, 22235338, 22266747, 22259356, 22224782, 22232036, 22252720, 22242358, 22225372, 22243101, 22262690, 22246004, 22270760, 22268177, 22270381, 22268118, 22247551, 22242411, 22227266, 22251329, 22224582, 22251867, 22251123, 22238821, 22254642, 22236083, 22257192, 22251167, 22253247, 22228639, 22269413, 22225136, 22241033, 22259683, 22237745, 22250501, 22224498, 22226382, 22232383, 22255882, 22247026, 22242506, 22263241, 22249256, 22241786, 22236577, 22225312, 22267529, 22250350, 22262462, 22234591, 22229204, 22260034, 22227993, 22240433, 22264744, 22231597, 22246793, 22234320, 22274022, 22256469, 22259547, 22256382, 22241877, 22230168, 22225263, 22225314, 22231944, 22233054, 22229109, 22231227, 22258777, 22228220, 22231579, 22255584, 22262813, 22242280, 22237104, 22265025, 22234399, 22263783, 22233109, 22227860, 22233821, 22269704, 22257205, 22233032, 22243373, 22269547, 22246774, 22246339, 22225313, 22226419, 22253785, 22251388, 22265849, 22228449, 22229666, 22257374, 22262905, 22269038, 22261197, 22240533, 22237740, 22252137, 22226365, 22249015, 22233113, 22268643, 22234765, 22231096, 22233156, 22250878, 22264576, 22268424, 22259757, 22263304, 22229712, 22251325, 22235756, 22268221, 22232473, 22260912, 22263354, 22255089, 22244445, 22234718, 22260038, 22254760, 22261640, 22252150, 22246104, 22251237, 22261341, 22272264, 22228071, 22234709, 22255813, 22251416, 22266794, 22266620, 22249828, 22253560, 22249798, 22266463, 22263298, 22228879, 22228700, 22238196, 22271740 ]';
    expect(parseTopStories(jsonString).first, 22276184);
  });

  test("parses item.json", () {
    const jsonString = """{
  "by" : "dhouston",
  "descendants" : 71,
  "id" : 8863,
  "kids" : [ 9224, 8917, 8952, 8884, 8887, 8869, 8958, 8940, 8908, 9005, 8873, 9671, 9067, 9055, 8865, 8881, 8872, 8955, 10403, 8903, 8928, 9125, 8998, 8901, 8902, 8907, 8894, 8870, 8878, 8980, 8934, 8943, 8876 ],
  "score" : 104,
  "time" : 1175714200,
  "title" : "My YC app: Dropbox - Throw away your USB drive",
  "type" : "story",
  "url" : "http://www.getdropbox.com/u/2/screencast.html"
}
""";
    expect(parseArticle(jsonString).by, "dhouston");
  });

  test("parses item.json over a network", () async {
    final url = 'https://hacker-news.firebaseio.com/v0/beststories.json';
    final response = await http.get(url);
    if (response.statusCode == 200) {
      final idList = parseTopStories(response.body);
      if (idList.isNotEmpty) {
        final storyUrl =
            'https://hacker-news.firebaseio.com/v0/item/${idList.first}.json';
        final storyResponse = await http.get(storyUrl);
        if (storyResponse.statusCode == 200) {
          expect(parseArticle(storyResponse.body), isNotNull);
        } else {
          // TODO error handling
        }
      }
    } else {
      // TODO error handling
    }
  }, skip: true);
}
